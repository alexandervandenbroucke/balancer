# Expense Balancing


A code experiment to equalise the balances of a group of people.

## Compiling and running


Using the cabal tool

```
$ cabal new-configure
$ stack new-build
```

## General Usage

The most likely use case for this project is a library for your own program,
or directly from GHCi (use `stack ghci`).

## Example Program

* Using the flow-network based algorithm:

  ```
  $ cabal new-run balancer-example -- 100
  ```

* Using the greedy algorithm (a lot faster):

  ```
  $ cabal new-run balancer-example -- greedy 1000
  ```

* The following version also uses the greedy algorithm, but does not print
  output (mainly for performance testing).

  ```
  $ cabal new-run balancer-example -- noprint 4000
  ```

## Balancing Expenses for A Bachelor's Party

In the app/ directory, you can also find a more in-depth real-life example.
This program to generate balancing transfers from expenses read in from
a CSV file.

Example usage:

  ```
  $ cat expenses.csv | cabal new-run balancer-csv | tee transfers.txt
  ```
  Total expenditure: <amount>, per person: <amount>
  After deposit expenditures:
  <expense overview snipped>
  Balancing expenses ...
  Sanity Check: OK
  Balanced Check: OK
  Balancing transfers:
  <list of transfers>
  Writing transfers to transfers.csv...

The program also writes the generated transfers to a CSV file for use in
other programs, such as a spreadsheet.
The `tee` command also writes the human readable output to a file
"transfers.txt" for easier sharing.

Note: the file expenses.csv is *not* provided, for obvious reasons.

A lot of things are hard-coded and specific (e.g. the names of the individuals)
or account numbers. The default balancing method uses "central" balancing:
balancing through a central intermediary (i.e. me).
This ensures that all other participants only need to make at most one
transfer.
If so desired, greedy balancing can be selected by passing the `greedy`
argument on the command line.

  ```
  $ cat expenses.csv | cabal new-run balancer-csv greedy
  ```
  <output snipped>

